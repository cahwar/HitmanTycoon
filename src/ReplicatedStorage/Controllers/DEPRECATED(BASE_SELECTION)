-- Services
-- // Services

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- // References

local Knit = require(ReplicatedStorage.Packages.Knit)

local Modules = ReplicatedStorage.Modules

local GeneralLibraries = Modules.GeneralLibraries
local MethodsModule = require(GeneralLibraries.MethodsModule)
local CameraModule = require(GeneralLibraries.CameraModule)

-- // Module

local BaseSelectionController = Knit.CreateController { Name = "BaseSelectionController" }

function BaseSelectionController:_init()
    self.player = Players.LocalPlayer
    self.camera = workspace.CurrentCamera
    self.character = self.player.Character or self.player.CharacterAdded:Wait()
end

function BaseSelectionController:_tweenCamera()
    local baseObject: Model | Part = self.currentBase.Object

    local baseSize = baseObject:IsA("Model") and baseObject:GetExtentsSize() or baseObject.Size
    local maxAxisSize = math.max(baseSize.X, baseSize.Y, baseSize.Z)
    
    local baseCFrame = baseObject:IsA("Model") and baseObject:GetPivot() or baseObject.CFrame
    local basePosition = baseCFrame.Position

    local cameraCFrameToSet = CFrame.new(basePosition + baseCFrame.LookVector * maxAxisSize * 1.05 + Vector3.new(0, 10, 0), basePosition)

    MethodsModule.Tween(self.camera, {CFrame = cameraCFrameToSet}, TweenInfo.new(.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)):Play() 
end

function BaseSelectionController:_moveToCurrentBase()
    self.currentBase = self.avaliableBases[self.currentBaseIndex]
    self:_tweenCamera()
end

function BaseSelectionController:_moveToAnotherBase(directionRatio: number)
    Knit.GetService("BaseService").GetAvaliableBases():andThen(function(avaliableBases)
        self.avaliableBases = avaliableBases
        
        if self.avaliableBases[self.currentBaseIndex + directionRatio] ~= nil then self.currentBaseIndex += directionRatio
        else self.currentBaseIndex = directionRatio == 1 and 1 or #avaliableBases end

        self:_moveToCurrentBase()
    end)
end

function BaseSelectionController:_finishSession()
    if self.sessionMaid then self.sessionMaid:Destroy() end

    CameraModule.ForceCameraTransition(120, -120, 0, true, 0, 3, 2, {
        nil, function()
            -- BaseSelectionGui:Destroy()				
            -- Humanoid.WalkSpeed = StartWalkSpeed
            self.camera.CameraType = Enum.CameraType.Custom
            self.character:PivotTo(CFrame.new(self.currentBase.Object:GetPivot().Position + Vector3.new(0, 5, 0)))				
        end,
    }, .6, .5)
end

function BaseSelectionController:_confirmSelection()
    Knit.GetService("BaseService"):TrySelectBase(self.currentBase.Object):andThen(function(result: boolean, errorLog: string)
        if(result == true) then self:_finishSession() end
        
        self:_moveToAnotherBase(1)
        warn(errorLog)
    end)
end

function BaseSelectionController:_launchSession()
    self.sessionMaid = require(ReplicatedStorage.Packages.Maid).new()

    self.camera.CameraType = Enum.CameraType.Scriptable
    self.sessionMaid:GiveTask(self.camera:GetPropertyChangedSignal("CameraType"):Connect(function()
        self.camera.CameraType = Enum.CameraType.Scriptable
    end))

    local _, humanoidFoundSuccess = MethodsModule.Try(function()
        self.humanoid = self.character:FindFirstChildWhichIsA("Humanoid", true)
        return self.humanoid ~= nil
    end, 5, 2, false)

    if humanoidFoundSuccess then
        local startSpeed = self.humanoid.WalkSpeed
        self.humanoid.WalkSpeed = 0
        self.sessionMaid:GiveTask(function()
            self.humanoid.WalkSpeed = startSpeed
        end)
    end

    Knit.GetService("BaseService").GetAvaliableBases():andThen(function(avaliableBases)
        self.avaliableBases = avaliableBases
        self.currentBaseIndex = 1
        self:_moveToCurrentBase()

        game:GetService("ContextActionService"):BindAction("MoveToNextBase", function(actionName: string, inputState: Enum.UserInputState)
            if inputState ~= Enum.UserInputState.Begin then return end
            self:_moveToAnotherBase(1)
        end, false, Enum.UserInputType.MouseButton2)

        game:GetService("ContextActionService"):BindAction("MoveToPreviousBase", function(actionName: string, inputState: Enum.UserInputState)
            if inputState ~= Enum.UserInputState.Begin then return end
            self:_moveToAnotherBase(-1)
        end, false, Enum.UserInputType.MouseButton1)

        game:GetService("ContextActionService"):BindAction("Select", function(actionName: string, inputState: Enum.UserInputState)
            if inputState ~= Enum.UserInputState.Begin then return end
            self:_confirmSelection()
        end, false, Enum.KeyCode.F)
    end)
end

function BaseSelectionController:KnitStart()
    self:_launchSession()
end

function BaseSelectionController:KnitInit()
    self:_init()
end

return BaseSelectionController
